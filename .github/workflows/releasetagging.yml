name: Create Release on Tag

on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags.
        # Default: 1
        fetch-depth: 0

        # Whether to fetch tags, even if fetch-depth > 0.
        # Default: false
        fetch-tags: 10


    # Capture the username of the tag creator
    - name: Capture tag creator username
      id: capture_username
      run: |
        AUTHOR=$(git log -1 --pretty=format:'%an')
        echo "Tag pushed by: $AUTHOR"
        echo "::set-output name=username::$AUTHOR"
      shell: bash

    # Verify the author of the push
    - name: Verify the tag creator
      id: verify_author
      run: |
        if [ "${{ steps.capture_username.outputs.username }}" != "Peter Esser" ]; then
          echo "Unauthorized user: ${{ steps.capture_username.outputs.username }} tried to run this workflow."
          exit 1
        fi
      shell: bash

    # Determine the branch associated with the tag
    - name: Determine branch
      id: determine_branch
      run: |
        BRANCH=$(git branch --contains ${GITHUB_REF} | grep -v "detached" | sed 's/* //')
        echo "Branch associated with tag: $BRANCH"
        echo "::set-output name=branch::$BRANCH"

    # Set the prerelease flag based on the branch
    - name: Set prerelease flag
      id: set_prerelease
      run: |
        if [ "${{ steps.determine_branch.outputs.branch }}" = "main" ]; then
          echo "::set-output name=prerelease::false"
        else
          echo "::set-output name=prerelease::true"
        fi

    # Set up Node.js (required for many changelog tools like conventional-changelog)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # Install dependencies (adjust if your project has its own `package.json`)
    - name: Install dependencies
      run: |
        npm install -g conventional-changelog-cli

    # Generate release notes using conventional commits
    - name: Generate release notes
      id: generate_notes
      run: |
        conventional-changelog -r 2 > release-notes.md
        CHANGELOG="$(cat release-notes.md)"
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

        echo "Got changelog: $CHANGELOG"

        CHANGELOG="$(cat release-notes.md)"
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

        echo 'changelog<<EOF' >> $GITHUB_ENV
        echo $CHANGELOG >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        echo "Got changelog: $CHANGELOG"

        conventional-changelog -r 2 > ${{ github.workspace }}-CHANGELOG.txt
        conventional-changelog > ${{ github.workspace }}-CHANGELOG_ALL.txt

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        body_path: ${{ github.workspace }}-CHANGELOG.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: ${{ steps.set_prerelease.outputs.prerelease }}
        files: |
          ${{ github.workspace }}-CHANGELOG_ALL.txt
          ${{ github.workspace }}-CHANGELOG.txt

    # - name: Create GitHub Release
    #   uses: actions/create-release@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref_name }}
    #     release_name: Release2 ${{ github.ref_name }}
    #     body:  |
    #         ${{ env.GITHUB_ENV.changelog }}
    #     draft: false
    #     prerelease: ${{ steps.set_prerelease.outputs.prerelease }}

    # - name: Create release
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     gh release create "${{ github.ref_name }}" \
    #         --repo="$GITHUB_REPOSITORY" \
    #         --title="Release ${{ github.ref_name }}" \
    #         --generate-notes
