// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPGTableHelper.DataLayer.EfCore;

#nullable disable

namespace RPGTableHelper.DataLayer.Migrations
{
    [DbContext(typeof(RpgDbContext))]
    [Migration("20241207112553_AddNoteDocuments")]
    partial class AddNoteDocuments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.EncryptionChallengeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordPrefix")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RndInt")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EncryptionChallenges");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.Images.ImageMetaDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedForCampagneId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LocallyStored")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedForCampagneId");

                    b.HasIndex("CreatorId");

                    b.ToTable("imageMetaDatas");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.OpenSignInProviderRegisterRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExposedApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignInProviderRefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<int>("SignInProviderUsed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpenSignInProviderRegisterRequests");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CampagneName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DmUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RpgConfiguration")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DmUserId");

                    b.HasIndex("JoinCode")
                        .IsUnique();

                    b.ToTable("Campagnes");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneJoinRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CampagneId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId");

                    b.HasIndex("CampagneId", "PlayerId")
                        .IsUnique();

                    b.HasIndex("CampagneId", "UserId")
                        .IsUnique();

                    b.ToTable("CampagneJoinRequests");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatingUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteDocumentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("block_type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatingUserId");

                    b.HasIndex("NoteDocumentId");

                    b.ToTable("NoteBlocks");

                    b.HasDiscriminator<int>("block_type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteDocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedForCampagneId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatingUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedForCampagneId");

                    b.HasIndex("CreatingUserId");

                    b.ToTable("CampagneDocuments");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.PermittedUsersToNotesBlockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("NotesBlockId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermittedUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotesBlockId");

                    b.HasIndex("PermittedUserId");

                    b.ToTable("PermittedUsersToNotesBlocks");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.PlayerCharacterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CampagneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RpgCharacterConfiguration")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampagneId");

                    b.HasIndex("PlayerUserId");

                    b.ToTable("PlayerCharacters");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.UserCredentialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("EncryptionChallengeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("PasswordResetTokenExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SignInProvider")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EncryptionChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SignInProvider")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignInProviderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.ImageBlockEntity", b =>
                {
                    b.HasBaseType("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase");

                    b.Property<Guid>("ImageMetaDataId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ImageMetaDataId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.TextBlockEntity", b =>
                {
                    b.HasBaseType("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase");

                    b.Property<string>("MarkdownText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.EncryptionChallengeEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.Images.ImageMetaDataEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", "CreatedForCampagne")
                        .WithMany()
                        .HasForeignKey("CreatedForCampagneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedForCampagne");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "DmUser")
                        .WithMany()
                        .HasForeignKey("DmUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DmUser");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneJoinRequestEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", "Campagne")
                        .WithMany()
                        .HasForeignKey("CampagneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.PlayerCharacterEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campagne");

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "CreatingUser")
                        .WithMany()
                        .HasForeignKey("CreatingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteDocumentEntity", "NoteDocument")
                        .WithMany("NoteBlocks")
                        .HasForeignKey("NoteDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatingUser");

                    b.Navigation("NoteDocument");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteDocumentEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", "CreatedForCampagne")
                        .WithMany()
                        .HasForeignKey("CreatedForCampagneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "CreatingUser")
                        .WithMany()
                        .HasForeignKey("CreatingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedForCampagne");

                    b.Navigation("CreatingUser");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.PermittedUsersToNotesBlockEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase", "NotesBlock")
                        .WithMany("PermittedUsers")
                        .HasForeignKey("NotesBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "PermittedUser")
                        .WithMany()
                        .HasForeignKey("PermittedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotesBlock");

                    b.Navigation("PermittedUser");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.PlayerCharacterEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", "Campagne")
                        .WithMany("Characters")
                        .HasForeignKey("CampagneId");

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "PlayerUser")
                        .WithMany()
                        .HasForeignKey("PlayerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campagne");

                    b.Navigation("PlayerUser");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.UserCredentialEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.EncryptionChallengeEntity", "EncryptionChallengeOfUser")
                        .WithMany()
                        .HasForeignKey("EncryptionChallengeId");

                    b.HasOne("RPGTableHelper.DataLayer.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncryptionChallengeOfUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.ImageBlockEntity", b =>
                {
                    b.HasOne("RPGTableHelper.DataLayer.Entities.Images.ImageMetaDataEntity", "ImageMetaData")
                        .WithMany()
                        .HasForeignKey("ImageMetaDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageMetaData");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.CampagneEntity", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteBlockEntityBase", b =>
                {
                    b.Navigation("PermittedUsers");
                });

            modelBuilder.Entity("RPGTableHelper.DataLayer.Entities.RpgEntities.NoteEntities.NoteDocumentEntity", b =>
                {
                    b.Navigation("NoteBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
